/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 4.8.4-2ubuntu1~14.04.3 -O2 -fstack-protector -fPIC -Os) */

(* src = "Demux1a2_cuatrobits.v:1" *)
module demux1a2dosbits_descp_Estruct(clk_4f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2cuatrobits0, dataout_demux1a2cuatrobits1);
  (* src = "Demux1a2_cuatrobits.v:53" *)
  wire _000_;
  (* src = "Demux1a2_cuatrobits.v:53" *)
  wire _001_;
  (* src = "Demux1a2_cuatrobits.v:53" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  (* src = "Demux1a2_cuatrobits.v:3" *)
  input clk_4f;
  (* src = "Demux1a2_cuatrobits.v:6" *)
  input [3:0] data_in;
  (* src = "Demux1a2_cuatrobits.v:14" *)
  wire [3:0] data_reg0;
  (* src = "Demux1a2_cuatrobits.v:14" *)
  wire [3:0] data_reg1;
  (* src = "Demux1a2_cuatrobits.v:10" *)
  output [3:0] dataout_demux1a2cuatrobits0;
  (* src = "Demux1a2_cuatrobits.v:11" *)
  output [3:0] dataout_demux1a2cuatrobits1;
  (* src = "Demux1a2_cuatrobits.v:4" *)
  input reset_L;
  (* src = "Demux1a2_cuatrobits.v:13" *)
  wire selector;
  (* src = "Demux1a2_cuatrobits.v:5" *)
  input valid;
  (* src = "Demux1a2_cuatrobits.v:13" *)
  wire valid0;
  (* src = "Demux1a2_cuatrobits.v:13" *)
  wire valid1;
  (* src = "Demux1a2_cuatrobits.v:8" *)
  output validout0;
  (* src = "Demux1a2_cuatrobits.v:9" *)
  output validout1;
  NAND _042_ (
    .A(valid),
    .B(selector),
    .Y(_003_)
  );
  NAND _043_ (
    .A(_003_),
    .B(reset_L),
    .Y(_004_)
  );
  NOR _044_ (
    .A(valid0),
    .B(valid),
    .Y(_005_)
  );
  NOR _045_ (
    .A(_005_),
    .B(_004_),
    .Y(validout0)
  );
  NOT _046_ (
    .A(valid),
    .Y(_006_)
  );
  NOR _047_ (
    .A(_006_),
    .B(selector),
    .Y(_007_)
  );
  NOT _048_ (
    .A(valid1),
    .Y(_008_)
  );
  NAND _049_ (
    .A(_008_),
    .B(_006_),
    .Y(_009_)
  );
  NAND _050_ (
    .A(_009_),
    .B(reset_L),
    .Y(_010_)
  );
  NOR _051_ (
    .A(_010_),
    .B(_007_),
    .Y(validout1)
  );
  NOR _052_ (
    .A(valid),
    .B(selector),
    .Y(_011_)
  );
  NOR _053_ (
    .A(_011_),
    .B(_004_),
    .Y(_000_)
  );
  NOT _054_ (
    .A(selector),
    .Y(_012_)
  );
  NOR _055_ (
    .A(_006_),
    .B(_012_),
    .Y(_013_)
  );
  NOR _056_ (
    .A(_013_),
    .B(data_reg1[0]),
    .Y(_014_)
  );
  NOT _057_ (
    .A(data_in[0]),
    .Y(_015_)
  );
  NAND _058_ (
    .A(_013_),
    .B(_015_),
    .Y(_016_)
  );
  NAND _059_ (
    .A(_016_),
    .B(reset_L),
    .Y(_017_)
  );
  NOR _060_ (
    .A(_017_),
    .B(_014_),
    .Y(dataout_demux1a2cuatrobits1[0])
  );
  NOR _061_ (
    .A(_013_),
    .B(data_reg1[1]),
    .Y(_018_)
  );
  NOT _062_ (
    .A(data_in[1]),
    .Y(_019_)
  );
  NAND _063_ (
    .A(_013_),
    .B(_019_),
    .Y(_020_)
  );
  NAND _064_ (
    .A(_020_),
    .B(reset_L),
    .Y(_021_)
  );
  NOR _065_ (
    .A(_021_),
    .B(_018_),
    .Y(dataout_demux1a2cuatrobits1[1])
  );
  NOR _066_ (
    .A(_013_),
    .B(data_reg1[2]),
    .Y(_022_)
  );
  NOT _067_ (
    .A(data_in[2]),
    .Y(_023_)
  );
  NAND _068_ (
    .A(_013_),
    .B(_023_),
    .Y(_024_)
  );
  NAND _069_ (
    .A(_024_),
    .B(reset_L),
    .Y(_025_)
  );
  NOR _070_ (
    .A(_025_),
    .B(_022_),
    .Y(dataout_demux1a2cuatrobits1[2])
  );
  NOR _071_ (
    .A(_013_),
    .B(data_reg1[3]),
    .Y(_026_)
  );
  NOT _072_ (
    .A(data_in[3]),
    .Y(_027_)
  );
  NAND _073_ (
    .A(_013_),
    .B(_027_),
    .Y(_028_)
  );
  NAND _074_ (
    .A(_028_),
    .B(reset_L),
    .Y(_029_)
  );
  NOR _075_ (
    .A(_029_),
    .B(_026_),
    .Y(dataout_demux1a2cuatrobits1[3])
  );
  NOR _076_ (
    .A(_007_),
    .B(data_reg0[0]),
    .Y(_030_)
  );
  NAND _077_ (
    .A(_007_),
    .B(_015_),
    .Y(_031_)
  );
  NAND _078_ (
    .A(_031_),
    .B(reset_L),
    .Y(_032_)
  );
  NOR _079_ (
    .A(_032_),
    .B(_030_),
    .Y(dataout_demux1a2cuatrobits0[0])
  );
  NOR _080_ (
    .A(_007_),
    .B(data_reg0[1]),
    .Y(_033_)
  );
  NAND _081_ (
    .A(_007_),
    .B(_019_),
    .Y(_034_)
  );
  NAND _082_ (
    .A(_034_),
    .B(reset_L),
    .Y(_035_)
  );
  NOR _083_ (
    .A(_035_),
    .B(_033_),
    .Y(dataout_demux1a2cuatrobits0[1])
  );
  NOR _084_ (
    .A(_007_),
    .B(data_reg0[2]),
    .Y(_036_)
  );
  NAND _085_ (
    .A(_007_),
    .B(_023_),
    .Y(_037_)
  );
  NAND _086_ (
    .A(_037_),
    .B(reset_L),
    .Y(_038_)
  );
  NOR _087_ (
    .A(_038_),
    .B(_036_),
    .Y(dataout_demux1a2cuatrobits0[2])
  );
  NOR _088_ (
    .A(_007_),
    .B(data_reg0[3]),
    .Y(_039_)
  );
  NAND _089_ (
    .A(_007_),
    .B(_027_),
    .Y(_040_)
  );
  NAND _090_ (
    .A(_040_),
    .B(reset_L),
    .Y(_041_)
  );
  NOR _091_ (
    .A(_041_),
    .B(_039_),
    .Y(dataout_demux1a2cuatrobits0[3])
  );
  NOR _092_ (
    .A(_005_),
    .B(_004_),
    .Y(_001_)
  );
  NOR _093_ (
    .A(_010_),
    .B(_007_),
    .Y(_002_)
  );
  DFF _094_ (
    .C(clk_4f),
    .D(_000_),
    .Q(selector)
  );
  DFF _095_ (
    .C(clk_4f),
    .D(_001_),
    .Q(valid0)
  );
  DFF _096_ (
    .C(clk_4f),
    .D(_002_),
    .Q(valid1)
  );
  DFF _097_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[0]),
    .Q(data_reg0[0])
  );
  DFF _098_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[1]),
    .Q(data_reg0[1])
  );
  DFF _099_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[2]),
    .Q(data_reg0[2])
  );
  DFF _100_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[3]),
    .Q(data_reg0[3])
  );
  DFF _101_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits1[0]),
    .Q(data_reg1[0])
  );
  DFF _102_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits1[1]),
    .Q(data_reg1[1])
  );
  DFF _103_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits1[2]),
    .Q(data_reg1[2])
  );
  DFF _104_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits1[3]),
    .Q(data_reg1[3])
  );
endmodule

(* src = "Demux1a2_ochobits.v:2" *)
module demux1a2ochobits_descp_Estruct(clk_4f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2dosbits0, dataout_demux1a2dosbits1);
  (* src = "Demux1a2_ochobits.v:4" *)
  input clk_4f;
  (* src = "Demux1a2_ochobits.v:7" *)
  input [7:0] data_in;
  (* src = "Demux1a2_ochobits.v:11" *)
  output [7:0] dataout_demux1a2dosbits0;
  (* src = "Demux1a2_ochobits.v:12" *)
  output [7:0] dataout_demux1a2dosbits1;
  (* src = "Demux1a2_ochobits.v:5" *)
  input reset_L;
  (* src = "Demux1a2_ochobits.v:14" *)
  (* unused_bits = "0" *)
  wire temp0;
  (* src = "Demux1a2_ochobits.v:14" *)
  (* unused_bits = "0" *)
  wire temp1;
  (* src = "Demux1a2_ochobits.v:6" *)
  input valid;
  (* src = "Demux1a2_ochobits.v:9" *)
  output validout0;
  (* src = "Demux1a2_ochobits.v:10" *)
  output validout1;
  (* src = "Demux1a2_ochobits.v:16" *)
  demux1a2dosbits_descp_Estruct demux1a2ochobits_dos (
    .clk_4f(clk_4f),
    .data_in(data_in[7:4]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[7:4]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[7:4]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(temp0),
    .validout1(temp1)
  );
  (* src = "Demux1a2_ochobits.v:15" *)
  demux1a2dosbits_descp_Estruct demux1a2ochobits_uno (
    .clk_4f(clk_4f),
    .data_in(data_in[3:0]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[3:0]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[3:0]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule

(* top =  1  *)
(* src = "Demux1a2_descp_condL2.v:2" *)
module demux2a1_descp_EstructL2(clk_4f, reset_L, valid, data_in0_demuxL2, validout0, validout1, dataout0_demuxL2, dataout1_demuxL2);
  (* src = "Demux1a2_descp_condL2.v:4" *)
  input clk_4f;
  (* src = "Demux1a2_descp_condL2.v:7" *)
  input [7:0] data_in0_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:11" *)
  output [7:0] dataout0_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:12" *)
  output [7:0] dataout1_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:5" *)
  input reset_L;
  (* src = "Demux1a2_descp_condL2.v:6" *)
  input valid;
  (* src = "Demux1a2_descp_condL2.v:9" *)
  output validout0;
  (* src = "Demux1a2_descp_condL2.v:10" *)
  output validout1;
  (* src = "Demux1a2_descp_condL2.v:14" *)
  demux1a2ochobits_descp_Estruct demux1a2_8bitunoL2 (
    .clk_4f(clk_4f),
    .data_in(data_in0_demuxL2),
    .dataout_demux1a2dosbits0(dataout0_demuxL2),
    .dataout_demux1a2dosbits1(dataout1_demuxL2),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule
