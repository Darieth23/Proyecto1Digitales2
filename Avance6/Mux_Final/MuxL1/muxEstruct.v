/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 4.8.4-2ubuntu1~14.04.3 -O2 -fstack-protector -fPIC -Os) */

(* src = "Mux2a1_ochobits.v:2" *)
module mux_2to1_4bits_Estruct(selector, reset_L, in0, in1, valid_bit0, valid_bit1, valid_bit_out, data_out);
  (* src = "Mux2a1_ochobits.v:12" *)
  (* unused_bits = "0" *)
  wire bittemporal;
  (* src = "Mux2a1_ochobits.v:10" *)
  output [7:0] data_out;
  (* src = "Mux2a1_ochobits.v:5" *)
  input [7:0] in0;
  (* src = "Mux2a1_ochobits.v:6" *)
  input [7:0] in1;
  (* src = "Mux2a1_ochobits.v:4" *)
  input reset_L;
  (* src = "Mux2a1_ochobits.v:3" *)
  input selector;
  (* src = "Mux2a1_ochobits.v:7" *)
  input valid_bit0;
  (* src = "Mux2a1_ochobits.v:8" *)
  input valid_bit1;
  (* src = "Mux2a1_ochobits.v:9" *)
  output valid_bit_out;
  (* src = "Mux2a1_ochobits.v:13" *)
  mux_conductual_Estruct mux1 (
    .data_out(data_out[3:0]),
    .in0(in0[3:0]),
    .in1(in1[3:0]),
    .reset_L(reset_L),
    .selector(selector),
    .valid_bit0(valid_bit0),
    .valid_bit1(valid_bit1),
    .valid_bit_out(valid_bit_out)
  );
  (* src = "Mux2a1_ochobits.v:14" *)
  mux_conductual_Estruct mux2 (
    .data_out(data_out[7:4]),
    .in0(in0[7:4]),
    .in1(in1[7:4]),
    .reset_L(reset_L),
    .selector(selector),
    .valid_bit0(valid_bit0),
    .valid_bit1(valid_bit1),
    .valid_bit_out(bittemporal)
  );
endmodule

(* top =  1  *)
(* src = "Mux4a2_descp_condL1.v:2" *)
module mux_4to1_Estruct(clk_2f, selector, reset_L, in0, in1, in2, in3, valid_bit0, valid_bit1, valid_bit2, valid_bit3, valid_bit_out1, valid_bit_out2, data_out1, data_out2);
  (* src = "Mux4a2_descp_condL1.v:3" *)
  input clk_2f;
  (* src = "Mux4a2_descp_condL1.v:16" *)
  output [7:0] data_out1;
  (* src = "Mux4a2_descp_condL1.v:17" *)
  output [7:0] data_out2;
  (* src = "Mux4a2_descp_condL1.v:6" *)
  input [7:0] in0;
  (* src = "Mux4a2_descp_condL1.v:7" *)
  input [7:0] in1;
  (* src = "Mux4a2_descp_condL1.v:8" *)
  input [7:0] in2;
  (* src = "Mux4a2_descp_condL1.v:9" *)
  input [7:0] in3;
  (* src = "Mux4a2_descp_condL1.v:5" *)
  input reset_L;
  (* src = "Mux4a2_descp_condL1.v:4" *)
  input selector;
  (* src = "Mux4a2_descp_condL1.v:10" *)
  input valid_bit0;
  (* src = "Mux4a2_descp_condL1.v:11" *)
  input valid_bit1;
  (* src = "Mux4a2_descp_condL1.v:12" *)
  input valid_bit2;
  (* src = "Mux4a2_descp_condL1.v:13" *)
  input valid_bit3;
  (* src = "Mux4a2_descp_condL1.v:14" *)
  output valid_bit_out1;
  (* src = "Mux4a2_descp_condL1.v:15" *)
  output valid_bit_out2;
  (* src = "Mux4a2_descp_condL1.v:24" *)
  mux_2to1_4bits_Estruct mux1 (
    .data_out(data_out1),
    .in0(in0),
    .in1(in1),
    .reset_L(reset_L),
    .selector(clk_2f),
    .valid_bit0(valid_bit0),
    .valid_bit1(valid_bit1),
    .valid_bit_out(valid_bit_out1)
  );
  (* src = "Mux4a2_descp_condL1.v:25" *)
  mux_2to1_4bits_Estruct mux2 (
    .data_out(data_out2),
    .in0(in2),
    .in1(in3),
    .reset_L(reset_L),
    .selector(clk_2f),
    .valid_bit0(valid_bit2),
    .valid_bit1(valid_bit3),
    .valid_bit_out(valid_bit_out2)
  );
endmodule

(* src = "Mux2a1_cuatrobits.v:1" *)
module mux_conductual_Estruct(selector, reset_L, in0, in1, valid_bit0, valid_bit1, valid_bit_out, data_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  (* src = "Mux2a1_cuatrobits.v:9" *)
  output [3:0] data_out;
  (* src = "Mux2a1_cuatrobits.v:4" *)
  input [3:0] in0;
  (* src = "Mux2a1_cuatrobits.v:5" *)
  input [3:0] in1;
  (* src = "Mux2a1_cuatrobits.v:3" *)
  input reset_L;
  (* src = "Mux2a1_cuatrobits.v:2" *)
  input selector;
  (* src = "Mux2a1_cuatrobits.v:6" *)
  input valid_bit0;
  (* src = "Mux2a1_cuatrobits.v:7" *)
  input valid_bit1;
  (* src = "Mux2a1_cuatrobits.v:8" *)
  output valid_bit_out;
  (* src = "Mux2a1_cuatrobits.v:12" *)
  wire validotemporal;
  NOT _24_ (
    .A(in0[1]),
    .Y(_09_)
  );
  NOR _25_ (
    .A(_03_),
    .B(_09_),
    .Y(_10_)
  );
  NOT _26_ (
    .A(in1[1]),
    .Y(_11_)
  );
  NOR _27_ (
    .A(_06_),
    .B(_11_),
    .Y(_12_)
  );
  NOR _28_ (
    .A(_12_),
    .B(_10_),
    .Y(_13_)
  );
  NOR _29_ (
    .A(_13_),
    .B(_00_),
    .Y(data_out[1])
  );
  NOT _30_ (
    .A(in0[2]),
    .Y(_14_)
  );
  NOR _31_ (
    .A(_03_),
    .B(_14_),
    .Y(_15_)
  );
  NOT _32_ (
    .A(in1[2]),
    .Y(_16_)
  );
  NOR _33_ (
    .A(_06_),
    .B(_16_),
    .Y(_17_)
  );
  NOR _34_ (
    .A(_17_),
    .B(_15_),
    .Y(_18_)
  );
  NOR _35_ (
    .A(_18_),
    .B(_00_),
    .Y(data_out[2])
  );
  NOT _36_ (
    .A(in0[3]),
    .Y(_19_)
  );
  NOR _37_ (
    .A(_03_),
    .B(_19_),
    .Y(_20_)
  );
  NOT _38_ (
    .A(in1[3]),
    .Y(_21_)
  );
  NOR _39_ (
    .A(_06_),
    .B(_21_),
    .Y(_22_)
  );
  NOR _40_ (
    .A(_22_),
    .B(_20_),
    .Y(_23_)
  );
  NOR _41_ (
    .A(_23_),
    .B(_00_),
    .Y(data_out[3])
  );
  NAND _42_ (
    .A(_06_),
    .B(_03_),
    .Y(valid_bit_out)
  );
  NOT _43_ (
    .A(reset_L),
    .Y(_00_)
  );
  NOT _44_ (
    .A(in0[0]),
    .Y(_01_)
  );
  NOT _45_ (
    .A(selector),
    .Y(_02_)
  );
  NAND _46_ (
    .A(_02_),
    .B(valid_bit0),
    .Y(_03_)
  );
  NOR _47_ (
    .A(_03_),
    .B(_01_),
    .Y(_04_)
  );
  NOT _48_ (
    .A(in1[0]),
    .Y(_05_)
  );
  NAND _49_ (
    .A(selector),
    .B(valid_bit1),
    .Y(_06_)
  );
  NOR _50_ (
    .A(_06_),
    .B(_05_),
    .Y(_07_)
  );
  NOR _51_ (
    .A(_07_),
    .B(_04_),
    .Y(_08_)
  );
  NOR _52_ (
    .A(_08_),
    .B(_00_),
    .Y(data_out[0])
  );
  assign validotemporal = valid_bit_out;
endmodule
