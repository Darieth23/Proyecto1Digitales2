/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "Demux1a2_descp_condL2.v:2" *)
module demux1a2_descp_condL2es(clk_4f, clk_32f, reset_L, valid, data_in0_demuxL2, validout0, validout1, dataout0_demuxL2, dataout1_demuxL2);
  (* src = "Demux1a2_descp_condL2.v:5" *)
  input clk_32f;
  (* src = "Demux1a2_descp_condL2.v:4" *)
  input clk_4f;
  (* src = "Demux1a2_descp_condL2.v:8" *)
  input [7:0] data_in0_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:12" *)
  output [7:0] dataout0_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:13" *)
  output [7:0] dataout1_demuxL2;
  (* src = "Demux1a2_descp_condL2.v:6" *)
  input reset_L;
  (* src = "Demux1a2_descp_condL2.v:7" *)
  input valid;
  (* src = "Demux1a2_descp_condL2.v:10" *)
  output validout0;
  (* src = "Demux1a2_descp_condL2.v:11" *)
  output validout1;
  (* src = "Demux1a2_descp_condL2.v:15" *)
  demux1a2ochobits_descp_cond demux1a2_8bitunoL2 (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_in(data_in0_demuxL2),
    .dataout_demux1a2dosbits0(dataout0_demuxL2),
    .dataout_demux1a2dosbits1(dataout1_demuxL2),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule

(* src = "Demux1a2_cuatrobits.v:1" *)
module demux1a2dosbits_descp_condes(clk_4f, clk_32f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2cuatrobits0, dataout_demux1a2cuatrobits1);
  (* src = "Demux1a2_cuatrobits.v:57" *)
  wire _00_;
  (* src = "Demux1a2_cuatrobits.v:57" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "Demux1a2_cuatrobits.v:4" *)
  input clk_32f;
  (* src = "Demux1a2_cuatrobits.v:3" *)
  input clk_4f;
  (* src = "Demux1a2_cuatrobits.v:7" *)
  input [3:0] data_in;
  (* src = "Demux1a2_cuatrobits.v:15" *)
  wire [3:0] data_reg0;
  (* src = "Demux1a2_cuatrobits.v:11" *)
  output [3:0] dataout_demux1a2cuatrobits0;
  (* src = "Demux1a2_cuatrobits.v:12" *)
  output [3:0] dataout_demux1a2cuatrobits1;
  (* src = "Demux1a2_cuatrobits.v:5" *)
  input reset_L;
  (* src = "Demux1a2_cuatrobits.v:6" *)
  input valid;
  (* src = "Demux1a2_cuatrobits.v:14" *)
  wire valid0;
  (* src = "Demux1a2_cuatrobits.v:14" *)
  wire valid1;
  (* src = "Demux1a2_cuatrobits.v:9" *)
  output validout0;
  (* src = "Demux1a2_cuatrobits.v:10" *)
  output validout1;
  NOT _21_ (
    .A(reset_L),
    .Y(_02_)
  );
  NOR _22_ (
    .A(valid0),
    .B(valid),
    .Y(_03_)
  );
  NOR _23_ (
    .A(_03_),
    .B(_02_),
    .Y(validout0)
  );
  NOR _24_ (
    .A(valid),
    .B(valid1),
    .Y(_04_)
  );
  NOR _25_ (
    .A(_04_),
    .B(_02_),
    .Y(validout1)
  );
  NOR _26_ (
    .A(data_reg0[0]),
    .B(valid),
    .Y(_05_)
  );
  NOT _27_ (
    .A(data_in[0]),
    .Y(_06_)
  );
  NAND _28_ (
    .A(_06_),
    .B(valid),
    .Y(_07_)
  );
  NAND _29_ (
    .A(_07_),
    .B(reset_L),
    .Y(_08_)
  );
  NOR _30_ (
    .A(_08_),
    .B(_05_),
    .Y(dataout_demux1a2cuatrobits0[0])
  );
  NOR _31_ (
    .A(data_reg0[1]),
    .B(valid),
    .Y(_09_)
  );
  NOT _32_ (
    .A(data_in[1]),
    .Y(_10_)
  );
  NAND _33_ (
    .A(_10_),
    .B(valid),
    .Y(_11_)
  );
  NAND _34_ (
    .A(_11_),
    .B(reset_L),
    .Y(_12_)
  );
  NOR _35_ (
    .A(_12_),
    .B(_09_),
    .Y(dataout_demux1a2cuatrobits0[1])
  );
  NOR _36_ (
    .A(data_reg0[2]),
    .B(valid),
    .Y(_13_)
  );
  NOT _37_ (
    .A(data_in[2]),
    .Y(_14_)
  );
  NAND _38_ (
    .A(_14_),
    .B(valid),
    .Y(_15_)
  );
  NAND _39_ (
    .A(_15_),
    .B(reset_L),
    .Y(_16_)
  );
  NOR _40_ (
    .A(_16_),
    .B(_13_),
    .Y(dataout_demux1a2cuatrobits0[2])
  );
  NOR _41_ (
    .A(data_reg0[3]),
    .B(valid),
    .Y(_17_)
  );
  NOT _42_ (
    .A(data_in[3]),
    .Y(_18_)
  );
  NAND _43_ (
    .A(_18_),
    .B(valid),
    .Y(_19_)
  );
  NAND _44_ (
    .A(_19_),
    .B(reset_L),
    .Y(_20_)
  );
  NOR _45_ (
    .A(_20_),
    .B(_17_),
    .Y(dataout_demux1a2cuatrobits0[3])
  );
  NOR _46_ (
    .A(_03_),
    .B(_02_),
    .Y(_00_)
  );
  NOR _47_ (
    .A(_04_),
    .B(_02_),
    .Y(_01_)
  );
  DFF _48_ (
    .C(clk_4f),
    .D(_00_),
    .Q(valid0)
  );
  DFF _49_ (
    .C(clk_4f),
    .D(_01_),
    .Q(valid1)
  );
  DFF _50_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[0]),
    .Q(data_reg0[0])
  );
  DFF _51_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[1]),
    .Q(data_reg0[1])
  );
  DFF _52_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[2]),
    .Q(data_reg0[2])
  );
  DFF _53_ (
    .C(clk_4f),
    .D(dataout_demux1a2cuatrobits0[3]),
    .Q(data_reg0[3])
  );
  assign dataout_demux1a2cuatrobits1 = 4'b0000;
endmodule

(* src = "Demux1a2_cuatrobitsL1.v:1" *)
module demux1a2dosbits_descp_condL1es(clk_2f, clk_32f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2cuatrobits0, dataout_demux1a2cuatrobits1);
  (* src = "Demux1a2_cuatrobitsL1.v:59" *)
  wire _00_;
  (* src = "Demux1a2_cuatrobitsL1.v:59" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "Demux1a2_cuatrobitsL1.v:3" *)
  input clk_2f;
  (* src = "Demux1a2_cuatrobitsL1.v:4" *)
  input clk_32f;
  (* src = "Demux1a2_cuatrobitsL1.v:7" *)
  input [3:0] data_in;
  (* src = "Demux1a2_cuatrobitsL1.v:15" *)
  wire [3:0] data_reg0;
  (* src = "Demux1a2_cuatrobitsL1.v:11" *)
  output [3:0] dataout_demux1a2cuatrobits0;
  (* src = "Demux1a2_cuatrobitsL1.v:12" *)
  output [3:0] dataout_demux1a2cuatrobits1;
  (* src = "Demux1a2_cuatrobitsL1.v:5" *)
  input reset_L;
  (* src = "Demux1a2_cuatrobitsL1.v:6" *)
  input valid;
  (* src = "Demux1a2_cuatrobitsL1.v:14" *)
  wire valid0;
  (* src = "Demux1a2_cuatrobitsL1.v:14" *)
  wire valid1;
  (* src = "Demux1a2_cuatrobitsL1.v:9" *)
  output validout0;
  (* src = "Demux1a2_cuatrobitsL1.v:10" *)
  output validout1;
  NOT _21_ (
    .A(reset_L),
    .Y(_02_)
  );
  NOR _22_ (
    .A(valid0),
    .B(valid),
    .Y(_03_)
  );
  NOR _23_ (
    .A(_03_),
    .B(_02_),
    .Y(validout0)
  );
  NOR _24_ (
    .A(valid),
    .B(valid1),
    .Y(_04_)
  );
  NOR _25_ (
    .A(_04_),
    .B(_02_),
    .Y(validout1)
  );
  NOR _26_ (
    .A(data_reg0[0]),
    .B(valid),
    .Y(_05_)
  );
  NOT _27_ (
    .A(data_in[0]),
    .Y(_06_)
  );
  NAND _28_ (
    .A(_06_),
    .B(valid),
    .Y(_07_)
  );
  NAND _29_ (
    .A(_07_),
    .B(reset_L),
    .Y(_08_)
  );
  NOR _30_ (
    .A(_08_),
    .B(_05_),
    .Y(dataout_demux1a2cuatrobits0[0])
  );
  NOR _31_ (
    .A(data_reg0[1]),
    .B(valid),
    .Y(_09_)
  );
  NOT _32_ (
    .A(data_in[1]),
    .Y(_10_)
  );
  NAND _33_ (
    .A(_10_),
    .B(valid),
    .Y(_11_)
  );
  NAND _34_ (
    .A(_11_),
    .B(reset_L),
    .Y(_12_)
  );
  NOR _35_ (
    .A(_12_),
    .B(_09_),
    .Y(dataout_demux1a2cuatrobits0[1])
  );
  NOR _36_ (
    .A(data_reg0[2]),
    .B(valid),
    .Y(_13_)
  );
  NOT _37_ (
    .A(data_in[2]),
    .Y(_14_)
  );
  NAND _38_ (
    .A(_14_),
    .B(valid),
    .Y(_15_)
  );
  NAND _39_ (
    .A(_15_),
    .B(reset_L),
    .Y(_16_)
  );
  NOR _40_ (
    .A(_16_),
    .B(_13_),
    .Y(dataout_demux1a2cuatrobits0[2])
  );
  NOR _41_ (
    .A(data_reg0[3]),
    .B(valid),
    .Y(_17_)
  );
  NOT _42_ (
    .A(data_in[3]),
    .Y(_18_)
  );
  NAND _43_ (
    .A(_18_),
    .B(valid),
    .Y(_19_)
  );
  NAND _44_ (
    .A(_19_),
    .B(reset_L),
    .Y(_20_)
  );
  NOR _45_ (
    .A(_20_),
    .B(_17_),
    .Y(dataout_demux1a2cuatrobits0[3])
  );
  NOR _46_ (
    .A(_03_),
    .B(_02_),
    .Y(_00_)
  );
  NOR _47_ (
    .A(_04_),
    .B(_02_),
    .Y(_01_)
  );
  DFF _48_ (
    .C(clk_2f),
    .D(_00_),
    .Q(valid0)
  );
  DFF _49_ (
    .C(clk_2f),
    .D(_01_),
    .Q(valid1)
  );
  DFF _50_ (
    .C(clk_2f),
    .D(dataout_demux1a2cuatrobits0[0]),
    .Q(data_reg0[0])
  );
  DFF _51_ (
    .C(clk_2f),
    .D(dataout_demux1a2cuatrobits0[1]),
    .Q(data_reg0[1])
  );
  DFF _52_ (
    .C(clk_2f),
    .D(dataout_demux1a2cuatrobits0[2]),
    .Q(data_reg0[2])
  );
  DFF _53_ (
    .C(clk_2f),
    .D(dataout_demux1a2cuatrobits0[3]),
    .Q(data_reg0[3])
  );
  assign dataout_demux1a2cuatrobits1 = 4'b0000;
endmodule

(* src = "Demux1a2_ochobits.v:2" *)
module demux1a2ochobits_descp_condes(clk_4f, clk_32f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2dosbits0, dataout_demux1a2dosbits1);
  (* src = "Demux1a2_ochobits.v:5" *)
  input clk_32f;
  (* src = "Demux1a2_ochobits.v:4" *)
  input clk_4f;
  (* src = "Demux1a2_ochobits.v:8" *)
  input [7:0] data_in;
  (* src = "Demux1a2_ochobits.v:12" *)
  output [7:0] dataout_demux1a2dosbits0;
  (* src = "Demux1a2_ochobits.v:13" *)
  output [7:0] dataout_demux1a2dosbits1;
  (* src = "Demux1a2_ochobits.v:6" *)
  input reset_L;
  (* src = "Demux1a2_ochobits.v:15" *)
  (* unused_bits = "0" *)
  wire temp0;
  (* src = "Demux1a2_ochobits.v:15" *)
  (* unused_bits = "0" *)
  wire temp1;
  (* src = "Demux1a2_ochobits.v:7" *)
  input valid;
  (* src = "Demux1a2_ochobits.v:10" *)
  output validout0;
  (* src = "Demux1a2_ochobits.v:11" *)
  output validout1;
  (* src = "Demux1a2_ochobits.v:17" *)
  demux1a2dosbits_descp_condes demux1a2ochobits_dos (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_in(data_in[7:4]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[7:4]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[7:4]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(temp0),
    .validout1(temp1)
  );
  (* src = "Demux1a2_ochobits.v:16" *)
  demux1a2dosbits_descp_condes demux1a2ochobits_uno (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_in(data_in[3:0]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[3:0]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[3:0]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule

(* src = "Demux1a2_ochobitsL1.v:2" *)
module demux1a2ochobits_descp_condL1es(clk_2f, clk_32f, reset_L, valid, data_in, validout0, validout1, dataout_demux1a2dosbits0, dataout_demux1a2dosbits1);
  (* src = "Demux1a2_ochobitsL1.v:4" *)
  input clk_2f;
  (* src = "Demux1a2_ochobitsL1.v:5" *)
  input clk_32f;
  (* src = "Demux1a2_ochobitsL1.v:8" *)
  input [7:0] data_in;
  (* src = "Demux1a2_ochobitsL1.v:12" *)
  output [7:0] dataout_demux1a2dosbits0;
  (* src = "Demux1a2_ochobitsL1.v:13" *)
  output [7:0] dataout_demux1a2dosbits1;
  (* src = "Demux1a2_ochobitsL1.v:6" *)
  input reset_L;
  (* src = "Demux1a2_ochobitsL1.v:15" *)
  (* unused_bits = "0" *)
  wire temp0;
  (* src = "Demux1a2_ochobitsL1.v:15" *)
  (* unused_bits = "0" *)
  wire temp1;
  (* src = "Demux1a2_ochobitsL1.v:7" *)
  input valid;
  (* src = "Demux1a2_ochobitsL1.v:10" *)
  output validout0;
  (* src = "Demux1a2_ochobitsL1.v:11" *)
  output validout1;
  (* src = "Demux1a2_ochobitsL1.v:17" *)
  demux1a2dosbits_descp_condL1es demux1a2ochobits_dos (
    .clk_2f(clk_2f),
    .clk_32f(clk_32f),
    .data_in(data_in[7:4]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[7:4]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[7:4]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(temp0),
    .validout1(temp1)
  );
  (* src = "Demux1a2_ochobitsL1.v:16" *)
  demux1a2dosbits_descp_condL1es demux1a2ochobits_uno (
    .clk_2f(clk_2f),
    .clk_32f(clk_32f),
    .data_in(data_in[3:0]),
    .dataout_demux1a2cuatrobits0(dataout_demux1a2dosbits0[3:0]),
    .dataout_demux1a2cuatrobits1(dataout_demux1a2dosbits1[3:0]),
    .reset_L(reset_L),
    .valid(valid),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule

(* src = "Demux2a4_descp_condL1.v:2" *)
module demux2a4_descp_condL1es(clk_2f, clk_32f, reset_L, valid1, valid2, data_in0_demuxL1, data_in1_demuxL1, validout0, validout1, validout2, validout3, dataout0_demuxL1, dataout1_demuxL1, dataout2_demuxL1, dataout3_demuxL1);
  (* src = "Demux2a4_descp_condL1.v:4" *)
  input clk_2f;
  (* src = "Demux2a4_descp_condL1.v:5" *)
  input clk_32f;
  (* src = "Demux2a4_descp_condL1.v:9" *)
  input [7:0] data_in0_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:10" *)
  input [7:0] data_in1_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:16" *)
  output [7:0] dataout0_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:17" *)
  output [7:0] dataout1_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:18" *)
  output [7:0] dataout2_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:19" *)
  output [7:0] dataout3_demuxL1;
  (* src = "Demux2a4_descp_condL1.v:6" *)
  input reset_L;
  (* src = "Demux2a4_descp_condL1.v:7" *)
  input valid1;
  (* src = "Demux2a4_descp_condL1.v:8" *)
  input valid2;
  (* src = "Demux2a4_descp_condL1.v:12" *)
  output validout0;
  (* src = "Demux2a4_descp_condL1.v:13" *)
  output validout1;
  (* src = "Demux2a4_descp_condL1.v:14" *)
  output validout2;
  (* src = "Demux2a4_descp_condL1.v:15" *)
  output validout3;
  (* src = "Demux2a4_descp_condL1.v:22" *)
  demux1a2ochobits_descp_condL1es demux1a2_8bitdosL2 (
    .clk_2f(clk_2f),
    .clk_32f(clk_32f),
    .data_in(data_in1_demuxL1),
    .dataout_demux1a2dosbits0(dataout2_demuxL1),
    .dataout_demux1a2dosbits1(dataout3_demuxL1),
    .reset_L(reset_L),
    .valid(valid2),
    .validout0(validout2),
    .validout1(validout3)
  );
  (* src = "Demux2a4_descp_condL1.v:21" *)
  demux1a2ochobits_descp_condL1es demux1a2_8bitunoL2 (
    .clk_2f(clk_2f),
    .clk_32f(clk_32f),
    .data_in(data_in0_demuxL1),
    .dataout_demux1a2dosbits0(dataout0_demuxL1),
    .dataout_demux1a2dosbits1(dataout1_demuxL1),
    .reset_L(reset_L),
    .valid(valid1),
    .validout0(validout0),
    .validout1(validout1)
  );
endmodule

(* src = "clks.v:3" *)
module gen_clkes(reloj_32f, rst, reloj_4f, reloj_2f, reloj_f);
  (* src = "clks.v:17" *)
  wire [4:0] _000_;
  (* src = "clks.v:17" *)
  wire [3:0] _001_;
  (* src = "clks.v:17" *)
  wire [5:0] _002_;
  (* src = "clks.v:17" *)
  wire _003_;
  (* src = "clks.v:17" *)
  wire _004_;
  (* src = "clks.v:17" *)
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  (* src = "clks.v:15" *)
  wire bandera;
  (* src = "clks.v:13" *)
  wire [4:0] counter2f;
  (* src = "clks.v:12" *)
  wire [3:0] counter4f;
  (* src = "clks.v:14" *)
  wire [5:0] counterf;
  (* src = "clks.v:7" *)
  output reloj_2f;
  (* src = "clks.v:4" *)
  input reloj_32f;
  (* src = "clks.v:6" *)
  output reloj_4f;
  (* src = "clks.v:8" *)
  output reloj_f;
  (* src = "clks.v:5" *)
  input rst;
  NOT _064_ (
    .A(rst),
    .Y(_018_)
  );
  NOT _065_ (
    .A(counterf[0]),
    .Y(_019_)
  );
  NOR _066_ (
    .A(counterf[4]),
    .B(counterf[5]),
    .Y(_020_)
  );
  NOT _067_ (
    .A(_020_),
    .Y(_021_)
  );
  NOR _068_ (
    .A(_021_),
    .B(_019_),
    .Y(_022_)
  );
  NOR _069_ (
    .A(_022_),
    .B(_018_),
    .Y(_002_[0])
  );
  NOR _070_ (
    .A(_021_),
    .B(_018_),
    .Y(_023_)
  );
  NOT _071_ (
    .A(_023_),
    .Y(_024_)
  );
  NOT _072_ (
    .A(counterf[1]),
    .Y(_025_)
  );
  NAND _073_ (
    .A(_025_),
    .B(_019_),
    .Y(_026_)
  );
  NAND _074_ (
    .A(counterf[1]),
    .B(counterf[0]),
    .Y(_027_)
  );
  NAND _075_ (
    .A(_027_),
    .B(_026_),
    .Y(_028_)
  );
  NOR _076_ (
    .A(_028_),
    .B(_024_),
    .Y(_002_[1])
  );
  NOT _077_ (
    .A(counterf[2]),
    .Y(_029_)
  );
  NOR _078_ (
    .A(_027_),
    .B(_029_),
    .Y(_030_)
  );
  NAND _079_ (
    .A(_027_),
    .B(_029_),
    .Y(_031_)
  );
  NAND _080_ (
    .A(_031_),
    .B(_023_),
    .Y(_032_)
  );
  NOR _081_ (
    .A(_032_),
    .B(_030_),
    .Y(_002_[2])
  );
  NAND _082_ (
    .A(_030_),
    .B(counterf[3]),
    .Y(_033_)
  );
  NOT _083_ (
    .A(_033_),
    .Y(_034_)
  );
  NOT _084_ (
    .A(counterf[3]),
    .Y(_035_)
  );
  NOR _085_ (
    .A(_025_),
    .B(_019_),
    .Y(_036_)
  );
  NAND _086_ (
    .A(_036_),
    .B(counterf[2]),
    .Y(_037_)
  );
  NAND _087_ (
    .A(_037_),
    .B(_035_),
    .Y(_038_)
  );
  NAND _088_ (
    .A(_038_),
    .B(_023_),
    .Y(_039_)
  );
  NOR _089_ (
    .A(_039_),
    .B(_034_),
    .Y(_002_[3])
  );
  NOR _090_ (
    .A(_033_),
    .B(_024_),
    .Y(_002_[4])
  );
  NOT _091_ (
    .A(counter2f[0]),
    .Y(_040_)
  );
  NOR _092_ (
    .A(counter2f[3]),
    .B(counter2f[4]),
    .Y(_041_)
  );
  NOT _093_ (
    .A(_041_),
    .Y(_042_)
  );
  NOR _094_ (
    .A(_042_),
    .B(_040_),
    .Y(_043_)
  );
  NOR _095_ (
    .A(_043_),
    .B(_018_),
    .Y(_000_[0])
  );
  NAND _096_ (
    .A(_041_),
    .B(rst),
    .Y(_044_)
  );
  NOT _097_ (
    .A(counter2f[1]),
    .Y(_045_)
  );
  NAND _098_ (
    .A(_040_),
    .B(_045_),
    .Y(_046_)
  );
  NAND _099_ (
    .A(counter2f[0]),
    .B(counter2f[1]),
    .Y(_047_)
  );
  NAND _100_ (
    .A(_047_),
    .B(_046_),
    .Y(_048_)
  );
  NOR _101_ (
    .A(_048_),
    .B(_044_),
    .Y(_000_[1])
  );
  NOT _102_ (
    .A(_047_),
    .Y(_049_)
  );
  NAND _103_ (
    .A(_049_),
    .B(counter2f[2]),
    .Y(_050_)
  );
  NOT _104_ (
    .A(counter2f[2]),
    .Y(_051_)
  );
  NAND _105_ (
    .A(_047_),
    .B(_051_),
    .Y(_052_)
  );
  NAND _106_ (
    .A(_052_),
    .B(_050_),
    .Y(_053_)
  );
  NOR _107_ (
    .A(_053_),
    .B(_044_),
    .Y(_000_[2])
  );
  NOR _108_ (
    .A(_050_),
    .B(_044_),
    .Y(_000_[3])
  );
  NOT _109_ (
    .A(counter4f[0]),
    .Y(_054_)
  );
  NOR _110_ (
    .A(counter4f[2]),
    .B(counter4f[3]),
    .Y(_055_)
  );
  NOT _111_ (
    .A(_055_),
    .Y(_056_)
  );
  NOR _112_ (
    .A(_056_),
    .B(_054_),
    .Y(_057_)
  );
  NOR _113_ (
    .A(_057_),
    .B(_018_),
    .Y(_001_[0])
  );
  NAND _114_ (
    .A(_055_),
    .B(rst),
    .Y(_058_)
  );
  NOT _115_ (
    .A(counter4f[1]),
    .Y(_059_)
  );
  NAND _116_ (
    .A(_054_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _117_ (
    .A(counter4f[0]),
    .B(counter4f[1]),
    .Y(_061_)
  );
  NAND _118_ (
    .A(_061_),
    .B(_060_),
    .Y(_062_)
  );
  NOR _119_ (
    .A(_062_),
    .B(_058_),
    .Y(_001_[1])
  );
  NOR _120_ (
    .A(_061_),
    .B(_058_),
    .Y(_001_[2])
  );
  NOR _121_ (
    .A(_020_),
    .B(reloj_f),
    .Y(_063_)
  );
  NOT _122_ (
    .A(bandera),
    .Y(_006_)
  );
  NOR _123_ (
    .A(_006_),
    .B(reloj_f),
    .Y(_007_)
  );
  NOR _124_ (
    .A(_007_),
    .B(_021_),
    .Y(_008_)
  );
  NOR _125_ (
    .A(_008_),
    .B(_063_),
    .Y(_009_)
  );
  NOR _126_ (
    .A(_009_),
    .B(_018_),
    .Y(_005_)
  );
  NOR _127_ (
    .A(_041_),
    .B(reloj_2f),
    .Y(_010_)
  );
  NOR _128_ (
    .A(reloj_2f),
    .B(_006_),
    .Y(_011_)
  );
  NOR _129_ (
    .A(_011_),
    .B(_042_),
    .Y(_012_)
  );
  NOR _130_ (
    .A(_012_),
    .B(_010_),
    .Y(_013_)
  );
  NOR _131_ (
    .A(_013_),
    .B(_018_),
    .Y(_003_)
  );
  NOR _132_ (
    .A(_055_),
    .B(reloj_4f),
    .Y(_014_)
  );
  NOR _133_ (
    .A(reloj_4f),
    .B(_006_),
    .Y(_015_)
  );
  NOR _134_ (
    .A(_015_),
    .B(_056_),
    .Y(_016_)
  );
  NOR _135_ (
    .A(_016_),
    .B(_014_),
    .Y(_017_)
  );
  NOR _136_ (
    .A(_017_),
    .B(_018_),
    .Y(_004_)
  );
  DFF _137_ (
    .C(reloj_32f),
    .D(rst),
    .Q(bandera)
  );
  DFF _138_ (
    .C(reloj_32f),
    .D(_004_),
    .Q(reloj_4f)
  );
  DFF _139_ (
    .C(reloj_32f),
    .D(_003_),
    .Q(reloj_2f)
  );
  DFF _140_ (
    .C(reloj_32f),
    .D(_005_),
    .Q(reloj_f)
  );
  DFF _141_ (
    .C(reloj_32f),
    .D(_001_[0]),
    .Q(counter4f[0])
  );
  DFF _142_ (
    .C(reloj_32f),
    .D(_001_[1]),
    .Q(counter4f[1])
  );
  DFF _143_ (
    .C(reloj_32f),
    .D(_001_[2]),
    .Q(counter4f[2])
  );
  DFF _144_ (
    .C(reloj_32f),
    .D(1'b0),
    .Q(counter4f[3])
  );
  DFF _145_ (
    .C(reloj_32f),
    .D(_000_[0]),
    .Q(counter2f[0])
  );
  DFF _146_ (
    .C(reloj_32f),
    .D(_000_[1]),
    .Q(counter2f[1])
  );
  DFF _147_ (
    .C(reloj_32f),
    .D(_000_[2]),
    .Q(counter2f[2])
  );
  DFF _148_ (
    .C(reloj_32f),
    .D(_000_[3]),
    .Q(counter2f[3])
  );
  DFF _149_ (
    .C(reloj_32f),
    .D(1'b0),
    .Q(counter2f[4])
  );
  DFF _150_ (
    .C(reloj_32f),
    .D(_002_[0]),
    .Q(counterf[0])
  );
  DFF _151_ (
    .C(reloj_32f),
    .D(_002_[1]),
    .Q(counterf[1])
  );
  DFF _152_ (
    .C(reloj_32f),
    .D(_002_[2]),
    .Q(counterf[2])
  );
  DFF _153_ (
    .C(reloj_32f),
    .D(_002_[3]),
    .Q(counterf[3])
  );
  DFF _154_ (
    .C(reloj_32f),
    .D(_002_[4]),
    .Q(counterf[4])
  );
  DFF _155_ (
    .C(reloj_32f),
    .D(1'b0),
    .Q(counterf[5])
  );
endmodule

(* src = "partoserialIDLE.v:1" *)
module partoserialrxes(active, reset, clk_32f, IDL);
  (* src = "partoserialIDLE.v:26" *)
  wire _00_;
  (* src = "partoserialIDLE.v:26" *)
  wire [3:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "partoserialIDLE.v:6" *)
  output IDL;
  (* src = "partoserialIDLE.v:3" *)
  input active;
  (* src = "partoserialIDLE.v:5" *)
  input clk_32f;
  (* src = "partoserialIDLE.v:10" *)
  wire [3:0] contador;
  (* src = "partoserialIDLE.v:9" *)
  wire [7:0] data2send;
  (* src = "partoserialIDLE.v:4" *)
  input reset;
  NOT _21_ (
    .A(reset),
    .Y(_02_)
  );
  NOR _22_ (
    .A(contador[0]),
    .B(_02_),
    .Y(_01_[0])
  );
  NOT _23_ (
    .A(contador[0]),
    .Y(_03_)
  );
  NOT _24_ (
    .A(contador[1]),
    .Y(_04_)
  );
  NOR _25_ (
    .A(_04_),
    .B(_03_),
    .Y(_05_)
  );
  NAND _26_ (
    .A(_04_),
    .B(_03_),
    .Y(_06_)
  );
  NAND _27_ (
    .A(_06_),
    .B(reset),
    .Y(_07_)
  );
  NOR _28_ (
    .A(_07_),
    .B(_05_),
    .Y(_01_[1])
  );
  NOR _29_ (
    .A(_05_),
    .B(contador[2]),
    .Y(_08_)
  );
  NOT _30_ (
    .A(contador[2]),
    .Y(_09_)
  );
  NOR _31_ (
    .A(_09_),
    .B(_04_),
    .Y(_10_)
  );
  NOR _32_ (
    .A(_10_),
    .B(_02_),
    .Y(_11_)
  );
  NOR _33_ (
    .A(_11_),
    .B(_01_[0]),
    .Y(_12_)
  );
  NOR _34_ (
    .A(_12_),
    .B(_08_),
    .Y(_01_[2])
  );
  NOT _35_ (
    .A(contador[3]),
    .Y(_13_)
  );
  NOR _36_ (
    .A(_12_),
    .B(_13_),
    .Y(_01_[3])
  );
  NOT _37_ (
    .A(active),
    .Y(_14_)
  );
  NOR _38_ (
    .A(_03_),
    .B(_14_),
    .Y(_15_)
  );
  NOR _39_ (
    .A(contador[2]),
    .B(contador[1]),
    .Y(_16_)
  );
  NAND _40_ (
    .A(_03_),
    .B(_14_),
    .Y(_17_)
  );
  NAND _41_ (
    .A(_17_),
    .B(_16_),
    .Y(_18_)
  );
  NOR _42_ (
    .A(_18_),
    .B(_15_),
    .Y(_19_)
  );
  NAND _43_ (
    .A(_11_),
    .B(_13_),
    .Y(_20_)
  );
  NOR _44_ (
    .A(_20_),
    .B(_19_),
    .Y(_00_)
  );
  DFF _45_ (
    .C(clk_32f),
    .D(_00_),
    .Q(IDL)
  );
  DFF _46_ (
    .C(clk_32f),
    .D(_01_[0]),
    .Q(contador[0])
  );
  DFF _47_ (
    .C(clk_32f),
    .D(_01_[1]),
    .Q(contador[1])
  );
  DFF _48_ (
    .C(clk_32f),
    .D(_01_[2]),
    .Q(contador[2])
  );
  DFF _49_ (
    .C(clk_32f),
    .D(_01_[3]),
    .Q(contador[3])
  );
  assign data2send[6:0] = { active, 6'b111100 };
endmodule

(* top =  1  *)
(* src = "phy_rx.v:7" *)
module phy_rx_Est(clk_32f, rst, reset_L, entrada_tx, salida_rx_Est, out0, out1, out2, out3, val_out0, val_out1, val_out2, val_out3);
  (* src = "phy_rx.v:114" *)
  wire [7:0] _000_;
  (* src = "phy_rx.v:114" *)
  wire [7:0] _001_;
  (* src = "phy_rx.v:80" *)
  wire [7:0] _002_;
  (* src = "phy_rx.v:150" *)
  wire [7:0] _003_;
  (* src = "phy_rx.v:150" *)
  wire [7:0] _004_;
  (* src = "phy_rx.v:150" *)
  wire [7:0] _005_;
  (* src = "phy_rx.v:150" *)
  wire [7:0] _006_;
  (* src = "phy_rx.v:150" *)
  wire _007_;
  (* src = "phy_rx.v:150" *)
  wire _008_;
  (* src = "phy_rx.v:150" *)
  wire _009_;
  (* src = "phy_rx.v:150" *)
  wire _010_;
  (* src = "phy_rx.v:114" *)
  wire _011_;
  (* src = "phy_rx.v:114" *)
  wire _012_;
  (* src = "phy_rx.v:80" *)
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  (* src = "phy_rx.v:9" *)
  input clk_32f;
  (* src = "phy_rx.v:32" *)
  wire [7:0] dataout0_mod3;
  (* src = "phy_rx.v:43" *)
  wire [7:0] dataout0_mod3w;
  (* src = "phy_rx.v:50" *)
  wire [7:0] dataout0_mod4w;
  (* src = "phy_rx.v:33" *)
  wire [7:0] dataout1_mod3;
  (* src = "phy_rx.v:44" *)
  wire [7:0] dataout1_mod3w;
  (* src = "phy_rx.v:51" *)
  wire [7:0] dataout1_mod4w;
  (* src = "phy_rx.v:52" *)
  wire [7:0] dataout2_mod4w;
  (* src = "phy_rx.v:53" *)
  wire [7:0] dataout3_mod4w;
  (* src = "phy_rx.v:27" *)
  wire [7:0] dataout_mod1;
  (* src = "phy_rx.v:36" *)
  wire [7:0] dataout_mod1w;
  (* src = "phy_rx.v:13" *)
  input entrada_tx;
  (* src = "phy_rx.v:16" *)
  output [7:0] out0;
  (* src = "phy_rx.v:17" *)
  output [7:0] out1;
  (* src = "phy_rx.v:18" *)
  output [7:0] out2;
  (* src = "phy_rx.v:19" *)
  output [7:0] out3;
  (* src = "phy_rx.v:56" *)
  wire reloj_2f;
  (* src = "phy_rx.v:55" *)
  wire reloj_4f;
  (* src = "phy_rx.v:57" *)
  wire reloj_f;
  (* src = "phy_rx.v:11" *)
  input reset_L;
  (* src = "phy_rx.v:10" *)
  input rst;
  (* src = "phy_rx.v:15" *)
  output salida_rx_Est;
  (* src = "phy_rx.v:20" *)
  output val_out0;
  (* src = "phy_rx.v:21" *)
  output val_out1;
  (* src = "phy_rx.v:22" *)
  output val_out2;
  (* src = "phy_rx.v:23" *)
  output val_out3;
  (* src = "phy_rx.v:46" *)
  wire validout0_L1w;
  (* src = "phy_rx.v:30" *)
  wire validout0_L2;
  (* src = "phy_rx.v:41" *)
  wire validout0_L2w;
  (* src = "phy_rx.v:47" *)
  wire validout1_L1w;
  (* src = "phy_rx.v:31" *)
  wire validout1_L2;
  (* src = "phy_rx.v:42" *)
  wire validout1_L2w;
  (* src = "phy_rx.v:48" *)
  wire validout2_L1w;
  (* src = "phy_rx.v:49" *)
  wire validout3_L1w;
  (* src = "phy_rx.v:28" *)
  wire validout_mod1;
  (* src = "phy_rx.v:37" *)
  wire validout_mod1w;
  NOT _078_ (
    .A(dataout2_mod4w[1]),
    .Y(_014_)
  );
  NOT _079_ (
    .A(rst),
    .Y(_015_)
  );
  NOR _080_ (
    .A(_015_),
    .B(_014_),
    .Y(_005_[1])
  );
  NOT _081_ (
    .A(dataout2_mod4w[2]),
    .Y(_016_)
  );
  NOR _082_ (
    .A(_016_),
    .B(_015_),
    .Y(_005_[2])
  );
  NOT _083_ (
    .A(dataout2_mod4w[3]),
    .Y(_017_)
  );
  NOR _084_ (
    .A(_017_),
    .B(_015_),
    .Y(_005_[3])
  );
  NOT _085_ (
    .A(dataout2_mod4w[4]),
    .Y(_018_)
  );
  NOR _086_ (
    .A(_018_),
    .B(_015_),
    .Y(_005_[4])
  );
  NOT _087_ (
    .A(dataout2_mod4w[5]),
    .Y(_019_)
  );
  NOR _088_ (
    .A(_019_),
    .B(_015_),
    .Y(_005_[5])
  );
  NOT _089_ (
    .A(dataout2_mod4w[6]),
    .Y(_020_)
  );
  NOR _090_ (
    .A(_020_),
    .B(_015_),
    .Y(_005_[6])
  );
  NOT _091_ (
    .A(dataout2_mod4w[7]),
    .Y(_021_)
  );
  NOR _092_ (
    .A(_021_),
    .B(_015_),
    .Y(_005_[7])
  );
  NOT _093_ (
    .A(dataout3_mod4w[0]),
    .Y(_022_)
  );
  NOR _094_ (
    .A(_022_),
    .B(_015_),
    .Y(_006_[0])
  );
  NOT _095_ (
    .A(dataout3_mod4w[1]),
    .Y(_023_)
  );
  NOR _096_ (
    .A(_023_),
    .B(_015_),
    .Y(_006_[1])
  );
  NOT _097_ (
    .A(dataout3_mod4w[2]),
    .Y(_024_)
  );
  NOR _098_ (
    .A(_024_),
    .B(_015_),
    .Y(_006_[2])
  );
  NOT _099_ (
    .A(dataout3_mod4w[3]),
    .Y(_025_)
  );
  NOR _100_ (
    .A(_025_),
    .B(_015_),
    .Y(_006_[3])
  );
  NOT _101_ (
    .A(dataout3_mod4w[4]),
    .Y(_026_)
  );
  NOR _102_ (
    .A(_026_),
    .B(_015_),
    .Y(_006_[4])
  );
  NOT _103_ (
    .A(dataout3_mod4w[5]),
    .Y(_027_)
  );
  NOR _104_ (
    .A(_027_),
    .B(_015_),
    .Y(_006_[5])
  );
  NOT _105_ (
    .A(dataout3_mod4w[6]),
    .Y(_028_)
  );
  NOR _106_ (
    .A(_028_),
    .B(_015_),
    .Y(_006_[6])
  );
  NOT _107_ (
    .A(dataout3_mod4w[7]),
    .Y(_029_)
  );
  NOR _108_ (
    .A(_029_),
    .B(_015_),
    .Y(_006_[7])
  );
  NOT _109_ (
    .A(dataout1_mod4w[0]),
    .Y(_030_)
  );
  NOR _110_ (
    .A(_030_),
    .B(_015_),
    .Y(_004_[0])
  );
  NOT _111_ (
    .A(dataout1_mod4w[1]),
    .Y(_031_)
  );
  NOR _112_ (
    .A(_031_),
    .B(_015_),
    .Y(_004_[1])
  );
  NOT _113_ (
    .A(dataout1_mod4w[2]),
    .Y(_032_)
  );
  NOR _114_ (
    .A(_032_),
    .B(_015_),
    .Y(_004_[2])
  );
  NOT _115_ (
    .A(dataout1_mod4w[3]),
    .Y(_033_)
  );
  NOR _116_ (
    .A(_033_),
    .B(_015_),
    .Y(_004_[3])
  );
  NOT _117_ (
    .A(dataout1_mod4w[4]),
    .Y(_034_)
  );
  NOR _118_ (
    .A(_034_),
    .B(_015_),
    .Y(_004_[4])
  );
  NOT _119_ (
    .A(dataout1_mod4w[5]),
    .Y(_035_)
  );
  NOR _120_ (
    .A(_035_),
    .B(_015_),
    .Y(_004_[5])
  );
  NOT _121_ (
    .A(dataout1_mod4w[6]),
    .Y(_036_)
  );
  NOR _122_ (
    .A(_036_),
    .B(_015_),
    .Y(_004_[6])
  );
  NOT _123_ (
    .A(dataout1_mod4w[7]),
    .Y(_037_)
  );
  NOR _124_ (
    .A(_037_),
    .B(_015_),
    .Y(_004_[7])
  );
  NOT _125_ (
    .A(dataout0_mod4w[0]),
    .Y(_038_)
  );
  NOR _126_ (
    .A(_038_),
    .B(_015_),
    .Y(_003_[0])
  );
  NOT _127_ (
    .A(dataout0_mod4w[1]),
    .Y(_039_)
  );
  NOR _128_ (
    .A(_039_),
    .B(_015_),
    .Y(_003_[1])
  );
  NOT _129_ (
    .A(dataout0_mod4w[2]),
    .Y(_040_)
  );
  NOR _130_ (
    .A(_040_),
    .B(_015_),
    .Y(_003_[2])
  );
  NOT _131_ (
    .A(dataout0_mod4w[3]),
    .Y(_041_)
  );
  NOR _132_ (
    .A(_041_),
    .B(_015_),
    .Y(_003_[3])
  );
  NOT _133_ (
    .A(dataout0_mod4w[4]),
    .Y(_042_)
  );
  NOR _134_ (
    .A(_042_),
    .B(_015_),
    .Y(_003_[4])
  );
  NOT _135_ (
    .A(dataout0_mod4w[5]),
    .Y(_043_)
  );
  NOR _136_ (
    .A(_043_),
    .B(_015_),
    .Y(_003_[5])
  );
  NOT _137_ (
    .A(dataout0_mod4w[6]),
    .Y(_044_)
  );
  NOR _138_ (
    .A(_044_),
    .B(_015_),
    .Y(_003_[6])
  );
  NOT _139_ (
    .A(dataout0_mod4w[7]),
    .Y(_045_)
  );
  NOR _140_ (
    .A(_045_),
    .B(_015_),
    .Y(_003_[7])
  );
  NOT _141_ (
    .A(validout3_L1w),
    .Y(_046_)
  );
  NOR _142_ (
    .A(_046_),
    .B(_015_),
    .Y(_010_)
  );
  NOT _143_ (
    .A(validout2_L1w),
    .Y(_047_)
  );
  NOR _144_ (
    .A(_047_),
    .B(_015_),
    .Y(_009_)
  );
  NOT _145_ (
    .A(validout1_L1w),
    .Y(_048_)
  );
  NOR _146_ (
    .A(_048_),
    .B(_015_),
    .Y(_008_)
  );
  NOT _147_ (
    .A(validout0_L1w),
    .Y(_049_)
  );
  NOR _148_ (
    .A(_049_),
    .B(_015_),
    .Y(_007_)
  );
  NOT _149_ (
    .A(dataout1_mod3w[0]),
    .Y(_050_)
  );
  NOR _150_ (
    .A(_050_),
    .B(_015_),
    .Y(_001_[0])
  );
  NOT _151_ (
    .A(dataout1_mod3w[1]),
    .Y(_051_)
  );
  NOR _152_ (
    .A(_051_),
    .B(_015_),
    .Y(_001_[1])
  );
  NOT _153_ (
    .A(dataout1_mod3w[2]),
    .Y(_052_)
  );
  NOR _154_ (
    .A(_052_),
    .B(_015_),
    .Y(_001_[2])
  );
  NOT _155_ (
    .A(dataout1_mod3w[3]),
    .Y(_053_)
  );
  NOR _156_ (
    .A(_053_),
    .B(_015_),
    .Y(_001_[3])
  );
  NOT _157_ (
    .A(dataout1_mod3w[4]),
    .Y(_054_)
  );
  NOR _158_ (
    .A(_054_),
    .B(_015_),
    .Y(_001_[4])
  );
  NOT _159_ (
    .A(dataout1_mod3w[5]),
    .Y(_055_)
  );
  NOR _160_ (
    .A(_055_),
    .B(_015_),
    .Y(_001_[5])
  );
  NOT _161_ (
    .A(dataout1_mod3w[6]),
    .Y(_056_)
  );
  NOR _162_ (
    .A(_056_),
    .B(_015_),
    .Y(_001_[6])
  );
  NOT _163_ (
    .A(dataout1_mod3w[7]),
    .Y(_057_)
  );
  NOR _164_ (
    .A(_057_),
    .B(_015_),
    .Y(_001_[7])
  );
  NOT _165_ (
    .A(dataout0_mod3w[0]),
    .Y(_058_)
  );
  NOR _166_ (
    .A(_058_),
    .B(_015_),
    .Y(_000_[0])
  );
  NOT _167_ (
    .A(dataout0_mod3w[1]),
    .Y(_059_)
  );
  NOR _168_ (
    .A(_059_),
    .B(_015_),
    .Y(_000_[1])
  );
  NOT _169_ (
    .A(dataout0_mod3w[2]),
    .Y(_060_)
  );
  NOR _170_ (
    .A(_060_),
    .B(_015_),
    .Y(_000_[2])
  );
  NOT _171_ (
    .A(dataout0_mod3w[3]),
    .Y(_061_)
  );
  NOR _172_ (
    .A(_061_),
    .B(_015_),
    .Y(_000_[3])
  );
  NOT _173_ (
    .A(dataout0_mod3w[4]),
    .Y(_062_)
  );
  NOR _174_ (
    .A(_062_),
    .B(_015_),
    .Y(_000_[4])
  );
  NOT _175_ (
    .A(dataout0_mod3w[5]),
    .Y(_063_)
  );
  NOR _176_ (
    .A(_063_),
    .B(_015_),
    .Y(_000_[5])
  );
  NOT _177_ (
    .A(dataout0_mod3w[6]),
    .Y(_064_)
  );
  NOR _178_ (
    .A(_064_),
    .B(_015_),
    .Y(_000_[6])
  );
  NOT _179_ (
    .A(dataout0_mod3w[7]),
    .Y(_065_)
  );
  NOR _180_ (
    .A(_065_),
    .B(_015_),
    .Y(_000_[7])
  );
  NOT _181_ (
    .A(validout1_L2w),
    .Y(_066_)
  );
  NOR _182_ (
    .A(_066_),
    .B(_015_),
    .Y(_012_)
  );
  NOT _183_ (
    .A(validout0_L2w),
    .Y(_067_)
  );
  NOR _184_ (
    .A(_067_),
    .B(_015_),
    .Y(_011_)
  );
  NOT _185_ (
    .A(validout_mod1w),
    .Y(_068_)
  );
  NOR _186_ (
    .A(_068_),
    .B(_015_),
    .Y(_013_)
  );
  NOT _187_ (
    .A(dataout_mod1w[0]),
    .Y(_069_)
  );
  NOR _188_ (
    .A(_069_),
    .B(_015_),
    .Y(_002_[0])
  );
  NOT _189_ (
    .A(dataout_mod1w[1]),
    .Y(_070_)
  );
  NOR _190_ (
    .A(_070_),
    .B(_015_),
    .Y(_002_[1])
  );
  NOT _191_ (
    .A(dataout_mod1w[2]),
    .Y(_071_)
  );
  NOR _192_ (
    .A(_071_),
    .B(_015_),
    .Y(_002_[2])
  );
  NOT _193_ (
    .A(dataout_mod1w[3]),
    .Y(_072_)
  );
  NOR _194_ (
    .A(_072_),
    .B(_015_),
    .Y(_002_[3])
  );
  NOT _195_ (
    .A(dataout_mod1w[4]),
    .Y(_073_)
  );
  NOR _196_ (
    .A(_073_),
    .B(_015_),
    .Y(_002_[4])
  );
  NOT _197_ (
    .A(dataout_mod1w[5]),
    .Y(_074_)
  );
  NOR _198_ (
    .A(_074_),
    .B(_015_),
    .Y(_002_[5])
  );
  NOT _199_ (
    .A(dataout_mod1w[6]),
    .Y(_075_)
  );
  NOR _200_ (
    .A(_075_),
    .B(_015_),
    .Y(_002_[6])
  );
  NOT _201_ (
    .A(dataout_mod1w[7]),
    .Y(_076_)
  );
  NOR _202_ (
    .A(_076_),
    .B(_015_),
    .Y(_002_[7])
  );
  NOT _203_ (
    .A(dataout2_mod4w[0]),
    .Y(_077_)
  );
  NOR _204_ (
    .A(_077_),
    .B(_015_),
    .Y(_005_[0])
  );
  DFF _205_ (
    .C(reloj_f),
    .D(_003_[0]),
    .Q(out0[0])
  );
  DFF _206_ (
    .C(reloj_f),
    .D(_003_[1]),
    .Q(out0[1])
  );
  DFF _207_ (
    .C(reloj_f),
    .D(_003_[2]),
    .Q(out0[2])
  );
  DFF _208_ (
    .C(reloj_f),
    .D(_003_[3]),
    .Q(out0[3])
  );
  DFF _209_ (
    .C(reloj_f),
    .D(_003_[4]),
    .Q(out0[4])
  );
  DFF _210_ (
    .C(reloj_f),
    .D(_003_[5]),
    .Q(out0[5])
  );
  DFF _211_ (
    .C(reloj_f),
    .D(_003_[6]),
    .Q(out0[6])
  );
  DFF _212_ (
    .C(reloj_f),
    .D(_003_[7]),
    .Q(out0[7])
  );
  DFF _213_ (
    .C(reloj_f),
    .D(_004_[0]),
    .Q(out1[0])
  );
  DFF _214_ (
    .C(reloj_f),
    .D(_004_[1]),
    .Q(out1[1])
  );
  DFF _215_ (
    .C(reloj_f),
    .D(_004_[2]),
    .Q(out1[2])
  );
  DFF _216_ (
    .C(reloj_f),
    .D(_004_[3]),
    .Q(out1[3])
  );
  DFF _217_ (
    .C(reloj_f),
    .D(_004_[4]),
    .Q(out1[4])
  );
  DFF _218_ (
    .C(reloj_f),
    .D(_004_[5]),
    .Q(out1[5])
  );
  DFF _219_ (
    .C(reloj_f),
    .D(_004_[6]),
    .Q(out1[6])
  );
  DFF _220_ (
    .C(reloj_f),
    .D(_004_[7]),
    .Q(out1[7])
  );
  DFF _221_ (
    .C(reloj_f),
    .D(_005_[0]),
    .Q(out2[0])
  );
  DFF _222_ (
    .C(reloj_f),
    .D(_005_[1]),
    .Q(out2[1])
  );
  DFF _223_ (
    .C(reloj_f),
    .D(_005_[2]),
    .Q(out2[2])
  );
  DFF _224_ (
    .C(reloj_f),
    .D(_005_[3]),
    .Q(out2[3])
  );
  DFF _225_ (
    .C(reloj_f),
    .D(_005_[4]),
    .Q(out2[4])
  );
  DFF _226_ (
    .C(reloj_f),
    .D(_005_[5]),
    .Q(out2[5])
  );
  DFF _227_ (
    .C(reloj_f),
    .D(_005_[6]),
    .Q(out2[6])
  );
  DFF _228_ (
    .C(reloj_f),
    .D(_005_[7]),
    .Q(out2[7])
  );
  DFF _229_ (
    .C(reloj_f),
    .D(_006_[0]),
    .Q(out3[0])
  );
  DFF _230_ (
    .C(reloj_f),
    .D(_006_[1]),
    .Q(out3[1])
  );
  DFF _231_ (
    .C(reloj_f),
    .D(_006_[2]),
    .Q(out3[2])
  );
  DFF _232_ (
    .C(reloj_f),
    .D(_006_[3]),
    .Q(out3[3])
  );
  DFF _233_ (
    .C(reloj_f),
    .D(_006_[4]),
    .Q(out3[4])
  );
  DFF _234_ (
    .C(reloj_f),
    .D(_006_[5]),
    .Q(out3[5])
  );
  DFF _235_ (
    .C(reloj_f),
    .D(_006_[6]),
    .Q(out3[6])
  );
  DFF _236_ (
    .C(reloj_f),
    .D(_006_[7]),
    .Q(out3[7])
  );
  DFF _237_ (
    .C(reloj_f),
    .D(_007_),
    .Q(val_out0)
  );
  DFF _238_ (
    .C(reloj_f),
    .D(_008_),
    .Q(val_out1)
  );
  DFF _239_ (
    .C(reloj_f),
    .D(_009_),
    .Q(val_out2)
  );
  DFF _240_ (
    .C(reloj_f),
    .D(_010_),
    .Q(val_out3)
  );
  DFF _241_ (
    .C(reloj_2f),
    .D(_011_),
    .Q(validout0_L2)
  );
  DFF _242_ (
    .C(reloj_2f),
    .D(_012_),
    .Q(validout1_L2)
  );
  DFF _243_ (
    .C(reloj_2f),
    .D(_000_[0]),
    .Q(dataout0_mod3[0])
  );
  DFF _244_ (
    .C(reloj_2f),
    .D(_000_[1]),
    .Q(dataout0_mod3[1])
  );
  DFF _245_ (
    .C(reloj_2f),
    .D(_000_[2]),
    .Q(dataout0_mod3[2])
  );
  DFF _246_ (
    .C(reloj_2f),
    .D(_000_[3]),
    .Q(dataout0_mod3[3])
  );
  DFF _247_ (
    .C(reloj_2f),
    .D(_000_[4]),
    .Q(dataout0_mod3[4])
  );
  DFF _248_ (
    .C(reloj_2f),
    .D(_000_[5]),
    .Q(dataout0_mod3[5])
  );
  DFF _249_ (
    .C(reloj_2f),
    .D(_000_[6]),
    .Q(dataout0_mod3[6])
  );
  DFF _250_ (
    .C(reloj_2f),
    .D(_000_[7]),
    .Q(dataout0_mod3[7])
  );
  DFF _251_ (
    .C(reloj_2f),
    .D(_001_[0]),
    .Q(dataout1_mod3[0])
  );
  DFF _252_ (
    .C(reloj_2f),
    .D(_001_[1]),
    .Q(dataout1_mod3[1])
  );
  DFF _253_ (
    .C(reloj_2f),
    .D(_001_[2]),
    .Q(dataout1_mod3[2])
  );
  DFF _254_ (
    .C(reloj_2f),
    .D(_001_[3]),
    .Q(dataout1_mod3[3])
  );
  DFF _255_ (
    .C(reloj_2f),
    .D(_001_[4]),
    .Q(dataout1_mod3[4])
  );
  DFF _256_ (
    .C(reloj_2f),
    .D(_001_[5]),
    .Q(dataout1_mod3[5])
  );
  DFF _257_ (
    .C(reloj_2f),
    .D(_001_[6]),
    .Q(dataout1_mod3[6])
  );
  DFF _258_ (
    .C(reloj_2f),
    .D(_001_[7]),
    .Q(dataout1_mod3[7])
  );
  DFF _259_ (
    .C(reloj_4f),
    .D(_002_[0]),
    .Q(dataout_mod1[0])
  );
  DFF _260_ (
    .C(reloj_4f),
    .D(_002_[1]),
    .Q(dataout_mod1[1])
  );
  DFF _261_ (
    .C(reloj_4f),
    .D(_002_[2]),
    .Q(dataout_mod1[2])
  );
  DFF _262_ (
    .C(reloj_4f),
    .D(_002_[3]),
    .Q(dataout_mod1[3])
  );
  DFF _263_ (
    .C(reloj_4f),
    .D(_002_[4]),
    .Q(dataout_mod1[4])
  );
  DFF _264_ (
    .C(reloj_4f),
    .D(_002_[5]),
    .Q(dataout_mod1[5])
  );
  DFF _265_ (
    .C(reloj_4f),
    .D(_002_[6]),
    .Q(dataout_mod1[6])
  );
  DFF _266_ (
    .C(reloj_4f),
    .D(_002_[7]),
    .Q(dataout_mod1[7])
  );
  DFF _267_ (
    .C(reloj_4f),
    .D(_013_),
    .Q(validout_mod1)
  );
  (* src = "phy_rx.v:59" *)
  gen_clkes clock (
    .reloj_2f(reloj_2f),
    .reloj_32f(clk_32f),
    .reloj_4f(reloj_4f),
    .reloj_f(reloj_f),
    .rst(rst)
  );
  (* src = "phy_rx.v:69" *)
  serialtoparrxes mod1 (
    .clk_32f(clk_32f),
    .clk_4f(reloj_4f),
    .data_in(entrada_tx),
    .data_out(dataout_mod1w),
    .reset_L(reset_L),
    .valid_out(validout_mod1w)
  );
  (* src = "phy_rx.v:91" *)
  partoserialrxes mod2 (
    .IDL(salida_rx_Est),
    .active(validout_mod1),
    .clk_32f(clk_32f),
    .reset(reset_L)
  );
  (* src = "phy_rx.v:100" *)
  demux1a2_descp_condL2es mod3 (
    .clk_32f(clk_32f),
    .clk_4f(reloj_4f),
    .data_in0_demuxL2(dataout_mod1),
    .dataout0_demuxL2(dataout0_mod3w),
    .dataout1_demuxL2(dataout1_mod3w),
    .reset_L(reset_L),
    .valid(validout_mod1),
    .validout0(validout0_L2w),
    .validout1(validout1_L2w)
  );
  (* src = "phy_rx.v:129" *)
  demux2a4_descp_condL1es mod4 (
    .clk_2f(reloj_2f),
    .clk_32f(clk_32f),
    .data_in0_demuxL1(dataout0_mod3),
    .data_in1_demuxL1(dataout1_mod3),
    .dataout0_demuxL1(dataout0_mod4w),
    .dataout1_demuxL1(dataout1_mod4w),
    .dataout2_demuxL1(dataout2_mod4w),
    .dataout3_demuxL1(dataout3_mod4w),
    .reset_L(reset_L),
    .valid1(validout0_L2),
    .valid2(validout1_L2),
    .validout0(validout0_L1w),
    .validout1(validout1_L1w),
    .validout2(validout2_L1w),
    .validout3(validout3_L1w)
  );
endmodule

(* src = "serialtoparIDLE.v:1" *)
module serialtoparrxes(data_out, valid_out, clk_4f, clk_32f, reset_L, data_in);
  (* src = "serialtoparIDLE.v:26" *)
  wire _00_;
  (* src = "serialtoparIDLE.v:26" *)
  wire [2:0] _01_;
  (* src = "serialtoparIDLE.v:16" *)
  wire [7:0] _02_;
  (* src = "serialtoparIDLE.v:26" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  (* src = "serialtoparIDLE.v:9" *)
  wire active;
  (* src = "serialtoparIDLE.v:11" *)
  wire [2:0] bc_cnt;
  (* src = "serialtoparIDLE.v:10" *)
  wire [7:0] buffer;
  (* src = "serialtoparIDLE.v:5" *)
  input clk_32f;
  (* src = "serialtoparIDLE.v:4" *)
  input clk_4f;
  (* src = "serialtoparIDLE.v:7" *)
  input data_in;
  (* src = "serialtoparIDLE.v:2" *)
  output [7:0] data_out;
  (* src = "serialtoparIDLE.v:6" *)
  input reset_L;
  (* src = "serialtoparIDLE.v:12" *)
  wire [7:0] shift_reg;
  (* src = "serialtoparIDLE.v:3" *)
  output valid_out;
  NOT _35_ (
    .A(reset_L),
    .Y(_04_)
  );
  NOR _36_ (
    .A(active),
    .B(bc_cnt[2]),
    .Y(_05_)
  );
  NOR _37_ (
    .A(_05_),
    .B(_04_),
    .Y(_00_)
  );
  NOT _38_ (
    .A(buffer[2]),
    .Y(_06_)
  );
  NOT _39_ (
    .A(buffer[3]),
    .Y(_07_)
  );
  NOR _40_ (
    .A(_07_),
    .B(_06_),
    .Y(_08_)
  );
  NOT _41_ (
    .A(buffer[4]),
    .Y(_09_)
  );
  NOT _42_ (
    .A(buffer[6]),
    .Y(_10_)
  );
  NOR _43_ (
    .A(_10_),
    .B(_09_),
    .Y(_11_)
  );
  NAND _44_ (
    .A(_11_),
    .B(_08_),
    .Y(_12_)
  );
  NOR _45_ (
    .A(buffer[0]),
    .B(data_in),
    .Y(_13_)
  );
  NOT _46_ (
    .A(buffer[1]),
    .Y(_14_)
  );
  NOR _47_ (
    .A(_14_),
    .B(buffer[5]),
    .Y(_15_)
  );
  NAND _48_ (
    .A(_15_),
    .B(_13_),
    .Y(_16_)
  );
  NOR _49_ (
    .A(_16_),
    .B(_12_),
    .Y(_17_)
  );
  NAND _50_ (
    .A(_17_),
    .B(reset_L),
    .Y(_18_)
  );
  NOR _51_ (
    .A(_18_),
    .B(bc_cnt[0]),
    .Y(_01_[0])
  );
  NOT _52_ (
    .A(bc_cnt[1]),
    .Y(_19_)
  );
  NOT _53_ (
    .A(bc_cnt[0]),
    .Y(_20_)
  );
  NAND _54_ (
    .A(_20_),
    .B(_19_),
    .Y(_21_)
  );
  NAND _55_ (
    .A(bc_cnt[0]),
    .B(bc_cnt[1]),
    .Y(_22_)
  );
  NAND _56_ (
    .A(_22_),
    .B(_21_),
    .Y(_23_)
  );
  NOR _57_ (
    .A(_23_),
    .B(_18_),
    .Y(_01_[1])
  );
  NOT _58_ (
    .A(bc_cnt[2]),
    .Y(_24_)
  );
  NOT _59_ (
    .A(_22_),
    .Y(_25_)
  );
  NOR _60_ (
    .A(_25_),
    .B(_24_),
    .Y(_26_)
  );
  NOR _61_ (
    .A(_22_),
    .B(bc_cnt[2]),
    .Y(_27_)
  );
  NOR _62_ (
    .A(_27_),
    .B(_26_),
    .Y(_28_)
  );
  NOR _63_ (
    .A(_28_),
    .B(_18_),
    .Y(_01_[2])
  );
  NOT _64_ (
    .A(valid_out),
    .Y(_29_)
  );
  NAND _65_ (
    .A(_05_),
    .B(_29_),
    .Y(_30_)
  );
  NAND _66_ (
    .A(_30_),
    .B(reset_L),
    .Y(_31_)
  );
  NOR _67_ (
    .A(_31_),
    .B(_17_),
    .Y(_03_)
  );
  NOT _68_ (
    .A(data_in),
    .Y(_32_)
  );
  NOR _69_ (
    .A(_04_),
    .B(_32_),
    .Y(_02_[0])
  );
  NOT _70_ (
    .A(buffer[0]),
    .Y(_33_)
  );
  NOR _71_ (
    .A(_04_),
    .B(_33_),
    .Y(_02_[1])
  );
  NOR _72_ (
    .A(_14_),
    .B(_04_),
    .Y(_02_[2])
  );
  NOR _73_ (
    .A(_06_),
    .B(_04_),
    .Y(_02_[3])
  );
  NOR _74_ (
    .A(_07_),
    .B(_04_),
    .Y(_02_[4])
  );
  NOR _75_ (
    .A(_09_),
    .B(_04_),
    .Y(_02_[5])
  );
  NOT _76_ (
    .A(buffer[5]),
    .Y(_34_)
  );
  NOR _77_ (
    .A(_04_),
    .B(_34_),
    .Y(_02_[6])
  );
  NOR _78_ (
    .A(_10_),
    .B(_04_),
    .Y(_02_[7])
  );
  DFF _79_ (
    .C(clk_4f),
    .D(_02_[0]),
    .Q(data_out[0])
  );
  DFF _80_ (
    .C(clk_4f),
    .D(_02_[1]),
    .Q(data_out[1])
  );
  DFF _81_ (
    .C(clk_4f),
    .D(_02_[2]),
    .Q(data_out[2])
  );
  DFF _82_ (
    .C(clk_4f),
    .D(_02_[3]),
    .Q(data_out[3])
  );
  DFF _83_ (
    .C(clk_4f),
    .D(_02_[4]),
    .Q(data_out[4])
  );
  DFF _84_ (
    .C(clk_4f),
    .D(_02_[5]),
    .Q(data_out[5])
  );
  DFF _85_ (
    .C(clk_4f),
    .D(_02_[6]),
    .Q(data_out[6])
  );
  DFF _86_ (
    .C(clk_4f),
    .D(_02_[7]),
    .Q(data_out[7])
  );
  DFF _87_ (
    .C(clk_4f),
    .D(_03_),
    .Q(valid_out)
  );
  DFF _88_ (
    .C(clk_4f),
    .D(_00_),
    .Q(active)
  );
  DFF _89_ (
    .C(clk_4f),
    .D(_01_[0]),
    .Q(bc_cnt[0])
  );
  DFF _90_ (
    .C(clk_4f),
    .D(_01_[1]),
    .Q(bc_cnt[1])
  );
  DFF _91_ (
    .C(clk_4f),
    .D(_01_[2]),
    .Q(bc_cnt[2])
  );
  DFF _92_ (
    .C(clk_32f),
    .D(_02_[0]),
    .Q(buffer[0])
  );
  DFF _93_ (
    .C(clk_32f),
    .D(_02_[1]),
    .Q(buffer[1])
  );
  DFF _94_ (
    .C(clk_32f),
    .D(_02_[2]),
    .Q(buffer[2])
  );
  DFF _95_ (
    .C(clk_32f),
    .D(_02_[3]),
    .Q(buffer[3])
  );
  DFF _96_ (
    .C(clk_32f),
    .D(_02_[4]),
    .Q(buffer[4])
  );
  DFF _97_ (
    .C(clk_32f),
    .D(_02_[5]),
    .Q(buffer[5])
  );
  DFF _98_ (
    .C(clk_32f),
    .D(_02_[6]),
    .Q(buffer[6])
  );
  assign shift_reg = { buffer[6:0], data_in };
endmodule
