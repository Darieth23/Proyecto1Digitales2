$date
	Wed May 27 12:44:19 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module bancoPruebas $end
$var wire 1 ! valid_bit_out1 $end
$var wire 1 " valid_bit1 $end
$var wire 1 # valid_bit0 $end
$var wire 1 $ selector $end
$var wire 1 % reset_L $end
$var wire 8 & in1 [7:0] $end
$var wire 8 ' in0 [7:0] $end
$var wire 8 ( data_out1 [7:0] $end
$var wire 1 ) clk_4f $end
$var wire 1 * clk_2f $end
$var wire 1 + clk $end
$scope module mux_probL2 $end
$var wire 8 , data_out2 [7:0] $end
$var wire 1 - valid_bit_out2 $end
$var wire 1 ! valid_bit_out1 $end
$var wire 8 . data_out1 [7:0] $end
$var reg 1 + clk $end
$var reg 1 * clk_2f $end
$var reg 1 ) clk_4f $end
$var reg 8 / in0 [7:0] $end
$var reg 8 0 in1 [7:0] $end
$var reg 1 % reset_L $end
$var reg 1 $ selector $end
$var reg 1 # valid_bit0 $end
$var reg 1 " valid_bit1 $end
$upscope $end
$scope module muxpruebaL2 $end
$var wire 1 ) clk_4f $end
$var wire 8 1 in0 [7:0] $end
$var wire 8 2 in1 [7:0] $end
$var wire 1 % reset_L $end
$var wire 1 $ selector $end
$var wire 1 # valid_bit0 $end
$var wire 1 " valid_bit1 $end
$var wire 1 ! valid_bit_out1 $end
$var wire 8 3 data_out1 [7:0] $end
$scope module mux1_L2 $end
$var wire 8 4 in0 [7:0] $end
$var wire 8 5 in1 [7:0] $end
$var wire 1 % reset_L $end
$var wire 1 ) selector $end
$var wire 1 # valid_bit0 $end
$var wire 1 " valid_bit1 $end
$var wire 1 ! valid_bit_out $end
$var wire 8 6 data_out [7:0] $end
$var wire 1 7 bittemporal $end
$scope module mux1 $end
$var wire 4 8 in0 [3:0] $end
$var wire 4 9 in1 [3:0] $end
$var wire 1 % reset_L $end
$var wire 1 ) selector $end
$var wire 1 # valid_bit0 $end
$var wire 1 " valid_bit1 $end
$var reg 4 : A [3:0] $end
$var reg 4 ; data_out [3:0] $end
$var reg 1 ! valid_bit_out $end
$var reg 1 < validotemporal $end
$upscope $end
$scope module mux2 $end
$var wire 4 = in0 [3:0] $end
$var wire 4 > in1 [3:0] $end
$var wire 1 % reset_L $end
$var wire 1 ) selector $end
$var wire 1 # valid_bit0 $end
$var wire 1 " valid_bit1 $end
$var reg 4 ? A [3:0] $end
$var reg 4 @ data_out [3:0] $end
$var reg 1 7 valid_bit_out $end
$var reg 1 A validotemporal $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1A
b0 @
b0 ?
b0 >
b0 =
1<
b0 ;
b0 :
b0 9
b0 8
17
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
z-
bz ,
0+
1*
1)
b0 (
b0 '
b0 &
1%
1$
1#
1"
1!
$end
#750
1<
1A
0)
#1500
b10 (
b10 .
b10 3
b10 6
b10 ;
b10 :
b10 9
b1 8
b10 &
b10 0
b10 2
b10 5
b1 '
b1 /
b1 1
b1 4
1<
1A
1)
0*
#2250
b1 (
b1 .
b1 3
b1 6
b1 ;
1<
b1 :
1A
0)
#3000
b1011 9
b1010 8
b1011 (
b1011 .
b1011 3
b1011 6
b1011 ;
b1011 &
b1011 0
b1011 2
b1011 5
b1010 '
b1010 /
b1010 1
b1010 4
1<
b1011 :
1A
1)
1*
1+
#3750
b1010 (
b1010 .
b1010 3
b1010 6
b1010 ;
1<
b1010 :
1A
0)
#4500
b110 9
b101 8
b110 (
b110 .
b110 3
b110 6
b110 ;
b110 &
b110 0
b110 2
b110 5
b101 '
b101 /
b101 1
b101 4
1<
b110 :
1A
1)
0*
#5250
b101 (
b101 .
b101 3
b101 6
b101 ;
1<
b101 :
1A
0)
#6000
b1010 @
b1010 ?
b1010 9
b1010 >
b1111 8
b1111 =
b10101010 (
b10101010 .
b10101010 3
b10101010 6
b1010 ;
b10101010 &
b10101010 0
b10101010 2
b10101010 5
b11111111 '
b11111111 /
b11111111 1
b11111111 4
1<
b1010 :
1A
1)
1*
0+
#6750
b1111 ;
b11111111 (
b11111111 .
b11111111 3
b11111111 6
b1111 @
1<
b1111 :
1A
b1111 ?
0)
#7500
b1 9
b0 >
b1001 8
b0 =
b1 ;
b1 (
b1 .
b1 3
b1 6
b0 @
b1 &
b1 0
b1 2
b1 5
b1001 '
b1001 /
b1001 1
b1001 4
1<
b1 :
1A
b0 ?
1)
0*
#8250
b1001 (
b1001 .
b1001 3
b1001 6
b1001 ;
1<
b1001 :
1A
0)
#9000
b1010 @
b1010 ?
b10 9
b1010 >
b1 8
b1111 =
b10100010 (
b10100010 .
b10100010 3
b10100010 6
b10 ;
b10100010 &
b10100010 0
b10100010 2
b10100010 5
b11110001 '
b11110001 /
b11110001 1
b11110001 4
1<
b10 :
1A
1)
1*
1+
#9750
b1 ;
b11110001 (
b11110001 .
b11110001 3
b11110001 6
b1111 @
1<
b1 :
1A
b1111 ?
0)
#10500
b10 ;
b10100010 (
b10100010 .
b10100010 3
b10100010 6
b1010 @
1<
b10 :
1A
b1010 ?
1)
0*
#11250
b1 ;
b11110001 (
b11110001 .
b11110001 3
b11110001 6
b1111 @
1<
b1 :
1A
b1111 ?
0)
#12000
b10 ;
b10100010 (
b10100010 .
b10100010 3
b10100010 6
b1010 @
1<
b10 :
1A
b1010 ?
1)
1*
0+
#12750
b1 ;
b11110001 (
b11110001 .
b11110001 3
b11110001 6
b1111 @
1<
b1 :
1A
b1111 ?
0)
#13500
b10 ;
b10100010 (
b10100010 .
b10100010 3
b10100010 6
b1010 @
1<
b10 :
1A
b1010 ?
1)
0*
#14250
b1 ;
b11110001 (
b11110001 .
b11110001 3
b11110001 6
b1111 @
1<
b1 :
1A
b1111 ?
0)
#15000
b10 ;
b10100010 (
b10100010 .
b10100010 3
b10100010 6
b1010 @
1<
b10 :
1A
b1010 ?
1)
1*
1+
